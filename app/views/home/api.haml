- content_for :head do
  = set_meta_tags :title => 'API Documentation'
  
#intro_blurb
  .inner
    #intro_blurb_title
      %span API Documentation
    #blurb
      Get Started with the Oil Reporter API
/ end intro

.clearboth

#breadcrumbs
  .inner
    %p.breadcrumb
      = render_crumbs :seperator => '<span class="breadarrow">/</span>'

#has_sidebar
  #body_block
    .inner
      #primary
        .content
          %h1
            What is the Oil Reporter API?
          %p
            The Oil Reporter API contains a series of methods for obtaining data through standard HTTP requests. This allows Oil Reporter to be integrated with just about any application that can connect to the web.
          
          .divider.top
          
          %h2 Sign Up
          %p
            You can get an API key by signing up for one 
            %a{ :href => "/signup", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Sign Up" }
              here.
          
          .divider.top
            %a{ :href => "#" }
              Top
              
          %h5 Table of Contents
          %ul
            %li
              %a{ :href => "#data", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Data Anchor" }
                Data Structure
            %li
              %a{ :href => "#create", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Create Anchor" }
                Create a New Report
            %li
              %a{ :href => "#session", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Create Session Anchor" }
                Create a New Report Session
            %li
              %a{ :href => "#meta", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Meta Anchor" }
                Add Metadata to Report
            %li
              %a{ :href => "#media", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Media Anchor" }
                Add Media to Report
            %li
              %a{ :href => "#list", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "List Anchor" }
                Retrieve a List of Reports
            %li
              %a{ :href => "#list_session", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "List Anchor" }
                Retrieve a List of Reports from Report Session
            %li
              %a{ :href => "#organization", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Organization Anchor" }
                Retrieve a List of Reports by Organization


          .divider.top
            %a{ :href => "#" }
              Top
          
          %a{ :name => "data" }
          %h2 Data Structure
          %p
            The structure of a report is below.
          %p
            :coderay
              #!plaintext
              - id (integer, read-only)
              - organization_pin (integer, optional)
              - report_session_id (integer, optional)
              - oil (integer, 0-10)
              - wetlands (integer, 0-10)
              - description (text)
              - wildlife (text)
              - latitude (float)
              - longitude (float)
              - created_at (datetime)
              - media (hash/binary) 
                  When parsing the results of a call to list, the media property 
                  is a hash with the fields tiny, thumb and medium each of which 
                  is a string corresponding to the URL where the image is located.

                  If media has not been set then the value is null.

                  On a call to update to upload a photo, then media accepts a binary stream.
              - meta (string key value pair)
                  Can only create this when updating a report or adding media.
                  See documentation below for a good explanation on how to add metdata.
          
          .divider.top
            %a{ :href => "#" }
              Top

          %a{ :name => "create" }
          %h2 Create a New Report
          %p
            Allows you to create a new report.  This request needs a unique device identifier (device_id).
            %li 
              Method: POST
            %li 
              URL: /reports
            %li 
              Required: oil, wetlands, device_id, api_key
            %li
              Success: id returned and HTTP status code 200
            %li
              Failure: array of errors and HTTP status code 422 
          %p
            :coderay
              #!plaintext
              curl -d "api_key=YOUR_API_KEY&latitude=29.964639&longitude=-90.067763&oil=5&wetlands=7&description=Distressed%20Wildlife&device_id=UNIQUE_DEVICE_ID" http://oilreporter.org/reports
              Returns {"id":8}
          
          .divider.top
            %a{ :href => "#" }
              Top

          %a{ :name => "session" }
          %h2 Create a New Report Session
          %p
            Allows you to create a new report session to use to group a batch of reports.
            %li 
              Method: POST
            %li 
              URL: /report_sessions
            %li 
              Required:  api_key
            %li
              Success: id returned and HTTP status code 200
            %li
              Failure: array of errors and HTTP status code 422 
          %p
            :coderay
              #!plaintext
              curl -d "api_key=YOUR_API_KEY" http://oilreporter.org/reports
              Returns {"id":26}

          .divider.top
            %a{ :href => "#" }
              Top

          %a{ :name => "meta" }
          %h2 Add Metadata to Reports
          %p
            Allows you to add as many metadata elements to your report.  You need the ID of the report you created to be able to call this url. Meta parameters can use any key and any value.  Both keys and values are stored as strings.  You can pass as many metadata items as you want.  In the example below we are adding two meta values.  The first one has a key of <i>my_key_1</i> with a value of <i>custom value</i>.  The other meta element has a key of <i>extra_url</i> with a value of <i>oilreporter.org</i>.
            %li 
              Method: PUT
            %li 
              URL: /reports/*ID*
            %li 
              Required: id, api_key, meta
            %li
              Success: empty text and HTTP status code 200
            %li
              Failure: empty text and HTTP status code 422
          %p
            :coderay
              #!plaintext
              curl -X PUT http://oilreporter.org/reports/8?api_key=YOUR_API_KEY&meta[my_key_1]=custom%20value&meta[extra_url]=oilreporter.org
              Returns empty text and an HTTP status code of 200

          .divider.top
            %a{ :href => "#" }
              Top
          
          %a{ :name => "media" }
          %h2 Add Media to Report
          %p
            Allows you to add media to an existing report.  You need the ID of the report you created to be able to call this url.  You may also pass metadata in this call as well (see above).
            %li 
              Method: PUT
            %li 
              URL: /reports/*ID*
            %li 
              Required: id, api_key
            %li
              Success: empty text and HTTP status code 200
            %li
              Failure: empty text and HTTP status code 422
          %p
            :coderay
              #!plaintext
              curl -X PUT -F "media=@seagull.jpg" http://oilreporter.org/reports/8?api_key=YOUR_API_KEY
              Returns empty text and an HTTP status code of 200
          
          .divider.top
            %a{ :href => "#" }
              Top
          
          %a{ :name => "list" }
          %h2 Retrieve a List of Reports
          %p
            Allows you to retrieve a list of reports.
            %li 
              Method: GET
            %li 
              URL: /reports.format (format: json, xml)
            %li 
              Required: api_key
            %li 
              Optional: page (default: 1)
            %li
              Success: array of paginated results status code 200
          %p
            :coderay
              #!plaintext
              curl http://oilreporter.org/reports.json?api_key=YOUR_API_KEY
              Returns
              [
                { "id": 8,
                  "oil": 5,
                  "wetlands": 7,
                  "description": "Distressed Wildlife",
                  "wildlife": "Dead",
                  "latitude":"29.9646",
                  "longitude": "-90.0678",
                  "created_at": "2010-05-13T19:29:54Z",
                  "report_session_id": null,
                  "media": { "tiny":"http://s3.amazonaws.com/oilreporter_production/medias/7/tiny.jpg?1273722135",
                             "thumb":"http://s3.amazonaws.com/oilreporter_production/medias/7/thumb.jpg?1273722135",
                             "medium":"http://s3.amazonaws.com/oilreporter_production/medias/7/medium.jpg?1273722135" },
                  "meta": { "my_custom_key": "my custom value",
                            "another_item": "another value"}
                }
              ]
              
          .divider.top
            %a{ :href => "#" }
              Top

          %a{ :name => "list_session" }
          %h2 Retrieve a List of Reports by Report Session
          %p
            Allows you to retrieve a list of reports with a specific report session id
            %li 
              Method: GET
            %li 
              URL: /report_sessions/REPORT_SESSION_ID/reports.format (format: json, xml)
            %li 
              Required: api_key, report_session_id
            %li 
              Optional: page (default: 1)
            %li
              Success: array of paginated results status code 200
          %p
            :coderay
              #!plaintext
              curl http://oilreporter.org/report_sessions/REPORT_SESSION_ID/reports.json?api_key=YOUR_API_KEY
              Returns
              [
                { "id": 8,
                  "oil": 5,
                  "wetlands": 7,
                  "description": "Distressed Wildlife",
                  "wildlife": "Dead",
                  "latitude":"29.9646",
                  "longitude": "-90.0678",
                  "created_at": "2010-05-13T19:29:54Z",
                  "report_session_id": 26,
                  "media": { "tiny":"http://s3.amazonaws.com/oilreporter_production/medias/7/tiny.jpg?1273722135",
                             "thumb":"http://s3.amazonaws.com/oilreporter_production/medias/7/thumb.jpg?1273722135",
                             "medium":"http://s3.amazonaws.com/oilreporter_production/medias/7/medium.jpg?1273722135" },
                  "meta": { "my_custom_key": "my custom value",
                            "another_item": "another value"}
                }
              ]

          .divider.top
            %a{ :href => "#" }
              Top

          %a{ :name => "organization" }
          %h2 List reports by organization
          %p
            Allows you to retrieve a list of an organization's reports
            %li
              Method: GET
            %li
              URL: /organizations/*PIN*
            %li
              Required: pin (#{link_to('Sign up', new_organization_path)}), api_key
            %li
              Optional: page (default: 1)
            %li
              Success: List of reports and HTTP status code 200
            %li
              Failure: Error message and HTTP status code 404
          %p
            :coderay
              #!plaintext
              curl -d "api_key=YOUR_API_KEY" http://oilreporter.org/organizations/1001
              [
                { "id": 8,
                  "oil": 5,
                  "wetlands": 7,
                  "description": "Distressed Wildlife",
                  "wildlife": "Dead",
                  "latitude":"29.9646",
                  "longitude": "-90.0678",
                  "created_at": "2010-05-13T19:29:54Z",
                  "report_session_id": null,
                  "media": { "tiny":"http://s3.amazonaws.com/oilreporter_production/medias/7/tiny.jpg?1273722135",
                             "thumb":"http://s3.amazonaws.com/oilreporter_production/medias/7/thumb.jpg?1273722135",
                             "medium":"http://s3.amazonaws.com/oilreporter_production/medias/7/medium.jpg?1273722135" },
                  "meta": { "my_custom_key": "my custom value",
                           "another_item": "another value"}
                }
              ]

          .divider.top
            %a{ :href => "#" }
              Top
        / end content
      / end primary
      
      #secondary
        .content
          / = search # disabled for now

          .widget.link_list
            %h3.widgettitle Navigation
            %ul
              %li
                %a{ :href => "#data", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Data Anchor Sidebar" }
                  Data Structure
              %li
                %a{ :href => "#create", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Create Anchor Sidebar" }
                  Create a New Report
              %li
                %a{ :href => "#session", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Create Session Anchor Sidebar" }
                  Create a New Report Session
              %li
                %a{ :href => "#meta", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Meta Anchor Sidebar" }
                  Add Metadata to Report
              %li
                %a{ :href => "#media", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Media Anchor Sidebar" }
                  Add Media to Report
              %li
                %a{ :href => "#list", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "List Anchor Sidebar" }
                  Retrieve a List of Reports
              %li
                %a{ :href => "#list_session", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "List Session Anchor Sidebar" }
                  Retrieve a List of Reports by Session
              %li
                %a{ :href => "#organization", "gt-evt" => "click", "gt-cat" => "api", "gt-lbl" => "Organization Anchor Sidebar" }
                  Retrieve a List of Reports by Organization